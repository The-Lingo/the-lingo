(define (list? xs)
  (if (null? xs)
      #t
      (if (pair? xs)
          (list? (cdr xs))
          #f)))
(define (list . xs) xs)
(define (length xs)
  (if (null? xs)
      0
      (+ 1 (length (cdr xs)))))
(define (list-ref xs k)
  (if (< k 0)
      (error "list-ref: not an exact nonnegative integer" k)
      (if (= k 0)
          (car xs)
          (list-ref (cdr xs) (- k 1)))))
(define (append xs ys)
  (if (null? xs)
      ys
      (cons (car xs) (append (cdr xs) ys))))
(define (range . args)
  (if (= (length args) 2)
      (let ((n (car args)) (m (car (cdr args))))
        (if (< n m)
            (cons n (range (+ n 1) m))
            '()))
      (if (= (length args) 1)
          (range 0 (car args))
          (error "range: arity mismatch" args))))
(define (map f xs)
  (if (null? xs)
      '()
      (cons (f (car xs)) (map f (cdr xs)))))
